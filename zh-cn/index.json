[{"categories":null,"content":"将博客网站从wordpress建站迁移至Hugo建站","date":"2023-05-04","objectID":"/zh-cn/posts/wordpress_to_hugo/","tags":null,"title":"Wordpress 迁移至 Hugo","uri":"/zh-cn/posts/wordpress_to_hugo/"},{"categories":null,"content":"背景 去年在Godaddy上买了一个网站主机，因为没有root权限，基本上我拿来也只能建站，我唯一的建站需求是博客，后来想自己搭一个代理，IP干净，能照顾到现有的全部科学上网需求，因此又在Godaddy上买了虚拟主机。自然而然想要在vps上建wordpress，将博客迁移到VPS上，之后就不用同时续费两个主机，同时博客也能当作代理的伪装。捣鼓了几次，发现自己搭建总是有各种问题，搭建完成了数据迁移又有问题，心里一气，加上vps的规格并不大，wordpress占用太高，加上迁移完成之后我就没法随时随地rebuild vps，就放弃了迁移wordpress的想法，转向通过其他建站方式来搭建博客。 动态网站中，除去占有率最高的wordpress，似乎只剩下typecho了，但是typecho的社区很明显的不活跃，官方文档更新时间也都是几年前了，虽然比起wordpress更轻量易用，不过还是不想以后面对一个不活跃社区去提问和查问题，所以暂时还是放弃了typecho。 静态网站中，hexo在github上的start数十分靠前，同时还注意到了hugo，因为mac上只有go环境，hugo的能力也基本满足了我的博客需求，二者对我而言大差不差，所以最终选择了hugo作为博客网站的框架。 今天起就开始hugo的迁移之旅，我想以我三天打鱼两天晒网的功力，这不是一件短期的事情，还是用博客来记录一下，也方便当我遇到一些不可revert的问题时，能够直接rebuild整个vps环境，从头搭建。 update at 2023/05/04 ","date":"2023-05-04","objectID":"/zh-cn/posts/wordpress_to_hugo/:1:0","tags":null,"title":"Wordpress 迁移至 Hugo","uri":"/zh-cn/posts/wordpress_to_hugo/"},{"categories":null,"content":"hugo的安装与初始化 Install Hugo On Mac 直接homebrew安装嘞 ","date":"2023-05-04","objectID":"/zh-cn/posts/wordpress_to_hugo/:2:0","tags":null,"title":"Wordpress 迁移至 Hugo","uri":"/zh-cn/posts/wordpress_to_hugo/"},{"categories":null,"content":"网站初始化 初始化网站文件 \u0026\u0026 git hugo hugo new site halfstackcd halfstack hugo cd halfstack halfstack git init 下载并启用主题 git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt echo \"theme = 'LoveIt'\" \u003e\u003e config.toml 修改主题文件 vim themes/LoveIt/config.toml [module] [module.hugoVersion] extended = true min = \"0.62.0\" [params] # site default theme [\"auto\", \"light\", \"dark\"] # 网站默认主题 [\"auto\", \"light\", \"dark\"] defaultTheme = \"auto\" # public git repo url only then enableGitInfo is true # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # which hash function used for SRI, when empty, no SRI is used # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"\" # date format # 日期格式 dateFormat = \"2006-01-02\" # website title for Open Graph and Twitter Cards # 网站标题, 用于 Open Graph 和 Twitter Cards title = \"Halfstack\" # website description for RSS, SEO, Open Graph and Twitter Cards # 网站描述, 用于 RSS, SEO, Open Graph 和 Twitter Cards description = \"Still have another half to learn\" # website images for Open Graph and Twitter Cards # 网站图片, 用于 Open Graph 和 Twitter Cards images = [] # Header config # 页面头部导航栏配置 [params.header] # desktop header mode [\"fixed\", \"normal\", \"auto\"] # 桌面端导航栏模式 [\"fixed\", \"normal\", \"auto\"] desktopMode = \"fixed\" # mobile header mode [\"fixed\", \"normal\", \"auto\"] # 移动端导航栏模式 [\"fixed\", \"normal\", \"auto\"] mobileMode = \"auto\" # Header title config # 页面头部导航栏标题配置 [params.header.title] # URL of the LOGO # LOGO 的 URL logo = \"\" # title name # 标题名称 name = \"Halfstack\" # you can add extra information before the name (HTML format is supported), such as icons # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # whether to use typeit animation for title name # 是否为标题显示打字机动画 typeit = false # Footer config # 页面底部信息配置 [params.footer] enable = true # Custom content (HTML format is supported) # 自定义内容 (支持 HTML 格式) custom = \"\" # whether to show Hugo and theme info # 是否显示 Hugo 和主题信息 hugo = true # whether to show copyright info # 是否显示版权信息 copyright = true # whether to show the author # 是否显示作者 author = true # site creation time # 网站创立年份 since = 2022 # Section (all posts) page config # Section (所有文章) 页面配置 [params.section] # special amount of posts in each section page # section 页面每页显示文章数量 paginate = 20 # date format (month and day) # 日期格式 (月和日) dateFormat = \"01-02\" # amount of RSS pages # RSS 文章数目 rss = 10 # List (category or tag) page config # List (目录或标签) 页面配置 [params.list] # special amount of posts in each list page # list 页面每页显示文章数量 paginate = 20 # date format (month and day) # 日期格式 (月和日) dateFormat = \"01-02\" # amount of RSS pages # RSS 文章数目 rss = 10 # App icon config # 应用图标配置 [params.app] # optional site title override for the app when added to an iOS home screen or Android launcher # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"Halfstack\" # whether to omit favicon resource links # 是否隐藏网站图标资源链接 noFavicon = false # modern SVG favicon to use in place of older style .png and .ico files # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android browser theme color # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari mask icon color # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-11 tile color # Windows v8-11 磁贴颜色 tileColor = \"#da532c\" # Search config # 搜索配置 [params.search] enable = true # type of search engine [\"lunr\", \"algolia\"] # 搜索引擎的类型 [\"lunr\", \"algolia\"] type = \"lunr\" # max index length of the chunked content # 文章内容最长索引长度 contentLength = 4000 # placeholder of the search bar # 搜索框的占位提示语 placeholder = \"\" # max number of results length # 最大结果数目 maxResultLength = 10 # snippet length of the result # 结果内容片段长度 snippetLength = 30 # HTML tag name of the highlight part in results # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # whether to use the absolute URL based on the baseURL in search index # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] i","date":"2023-05-04","objectID":"/zh-cn/posts/wordpress_to_hugo/:3:0","tags":null,"title":"Wordpress 迁移至 Hugo","uri":"/zh-cn/posts/wordpress_to_hugo/"},{"categories":null,"content":"文章迁移 迁移了部分文章 ","date":"2023-05-04","objectID":"/zh-cn/posts/wordpress_to_hugo/:4:0","tags":null,"title":"Wordpress 迁移至 Hugo","uri":"/zh-cn/posts/wordpress_to_hugo/"},{"categories":null,"content":"网站部署 ","date":"2023-05-04","objectID":"/zh-cn/posts/wordpress_to_hugo/:5:0","tags":null,"title":"Wordpress 迁移至 Hugo","uri":"/zh-cn/posts/wordpress_to_hugo/"},{"categories":null,"content":"Github 创建一个新的Git仓库，仓库名为 userName.github.io 如： 在网站根目录下执行命令生成/public文件夹 hugo 进入/public文件夹，执行以下命令，将public文件夹内的文件推送到新建的仓库中 cd public git init git branch -M main git remote add origin git@UserName.github.io.git git add . git commit git push -u origin main 查看效果 注意 config文件中的baseUrl需要修改为username.github.io ","date":"2023-05-04","objectID":"/zh-cn/posts/wordpress_to_hugo/:5:1","tags":null,"title":"Wordpress 迁移至 Hugo","uri":"/zh-cn/posts/wordpress_to_hugo/"},{"categories":null,"content":"VPS 网上有很多通过GithubAction自动推送VPS的教程，不过暂时不太想搞这些，先把基础的东西弄完吧。 进入public文件夹，切换到另一个分支(baseURL不同，会影响到githubPages的展示) cd public git checkout -b master 切换回网站根目录，生成vps上的public文件 cd ../ hugo --baseUrl=\"\" 将重新生成的public文件夹push至git cd public git commit . git push 登陆vps，clone master分支，修改nginx配置，指定网站根目录 cd ~/www/ git clone git@github.com:Oasis7311/Oasis7311.github.io.git sudo vim /etc/nginx/nginx.conf sudo systemctl restart nginx nginx配置修改如下： server { listen 8080 http2; #root /home/summer/www/webpage; root /home/summer/www/Oasis7311.github.io; index index.html; add_header Strict-Transport-Security \"max-age=63072000\" always; } 查看效果 暂时先将代理的伪装网站给替换掉了，实际的halfstack.net这个网站仍然还是在web Hosting上运行，后续网站的基础设施都搞完了再全部切过去 ","date":"2023-05-04","objectID":"/zh-cn/posts/wordpress_to_hugo/:5:2","tags":null,"title":"Wordpress 迁移至 Hugo","uri":"/zh-cn/posts/wordpress_to_hugo/"},{"categories":null,"content":"想着在服务器上搭一个chatgpt的代理，通过代理访问api.openai.com，因为服务器暂时还没被墙，可以不需要vpn也能访问 前情提要：我已经在服务器上搭建了xray的代理，利用xray做了一定的流量伪装，非vless+TLS流量会回落到8080端口部署的静态页面。 其实代理没有我想象中的那么难，毕竟已经是踩在巨人的肩膀上了，现在有太多好用的各种工具了，又不需要自己写什么代码，基本就是理解一下配置，然后写写配置就好了 ","date":"2023-03-31","objectID":"/zh-cn/posts/utilizing-the-fallback-mechanism-of-xray-and-nginx-proxy-for-handling-chatgpt-requests/:0:0","tags":null,"title":"利用Xray的回落机制+Nginx代理chatgpt请求","uri":"/zh-cn/posts/utilizing-the-fallback-mechanism-of-xray-and-nginx-proxy-for-handling-chatgpt-requests/"},{"categories":null,"content":"准备工作 找一个开源的代理部署，在github上随便找一个，或者可以直接和我用一样的：ChatGPT Proxy 按着部署之后，访问:8000/proxy流量的会被转发到api.openai.com。 ","date":"2023-03-31","objectID":"/zh-cn/posts/utilizing-the-fallback-mechanism-of-xray-and-nginx-proxy-for-handling-chatgpt-requests/:1:0","tags":null,"title":"利用Xray的回落机制+Nginx代理chatgpt请求","uri":"/zh-cn/posts/utilizing-the-fallback-mechanism-of-xray-and-nginx-proxy-for-handling-chatgpt-requests/"},{"categories":null,"content":"分析一下 首先搞懂完整的请求流程，当前的配置可以在搭建Xray服务端中查看： http请求会打到80端口上，nginx监听80端口，通过301状态码返回客户端，告知客户端请求https https请求打到443上，这个端口由xray监听，xray解析请求，判断流量是否是vless协议流量 如果是vless流量，则流入xray中进行处理 否则根据回落设置进行流量的转发 在配置中，默认转发至8080端口 nginx监听8080端口，返回设置的静态页面html内容。 在这里面，所有流量的出路，都是由xray来控制的，毫无疑问我们的代理请求不是vless协议，因此一定会被默认回落到8080端口 因此我要做的就是判断出哪些流量是期望代理走向openai。 ","date":"2023-03-31","objectID":"/zh-cn/posts/utilizing-the-fallback-mechanism-of-xray-and-nginx-proxy-for-handling-chatgpt-requests/:2:0","tags":null,"title":"利用Xray的回落机制+Nginx代理chatgpt请求","uri":"/zh-cn/posts/utilizing-the-fallback-mechanism-of-xray-and-nginx-proxy-for-handling-chatgpt-requests/"},{"categories":null,"content":"配置修改 假如现在xray成功将我的代理流量回落到了8080端口，这时候要做的就是让nginx监听这个端口的流量，做对应的转发。 通过新增一个location，判断8080端口请求的path，将请求转发到127.0.0.1:8000/proxy来处理 重启nginx，然后就结束了… ","date":"2023-03-31","objectID":"/zh-cn/posts/utilizing-the-fallback-mechanism-of-xray-and-nginx-proxy-for-handling-chatgpt-requests/:3:0","tags":null,"title":"利用Xray的回落机制+Nginx代理chatgpt请求","uri":"/zh-cn/posts/utilizing-the-fallback-mechanism-of-xray-and-nginx-proxy-for-handling-chatgpt-requests/"},{"categories":null,"content":"后话 1： 搭完了代理发现，其实还不如直接请求api接口。我用的是ChatBox进行对话，直连的时候，chatgpt的回答是不断返回补充的，而使用代理的时候，会等到完整的回答完成，再将回答完整返回到客户端来，当在问一些比较大的问题时，gpt的响应很长，也导致等待的时间很久，不会像直连那样能够不断看到chatgpt的回答。这个应该和部署的ChatGPT Proxy有关，不过我觉得，如果连梯子都没有的话，那等等吧，影响也不大^^ 2： 实际上我完全不懂nginx的config，这部分配置的修改也是我询问ChatGPT给出的答案。 ","date":"2023-03-31","objectID":"/zh-cn/posts/utilizing-the-fallback-mechanism-of-xray-and-nginx-proxy-for-handling-chatgpt-requests/:4:0","tags":null,"title":"利用Xray的回落机制+Nginx代理chatgpt请求","uri":"/zh-cn/posts/utilizing-the-fallback-mechanism-of-xray-and-nginx-proxy-for-handling-chatgpt-requests/"},{"categories":["科学上网"],"content":"Win 需要的工具： v2rayN Proxifier 没了 v2rayN可以下载With-Core的，不然需要再下载一个xray-core ","date":"2023-01-13","objectID":"/zh-cn/posts/combining-xray-with-v2rayn-and-proxifier/:1:0","tags":["工具"],"title":"Xray的使用-v2rayN与Proxifier结合","uri":"/zh-cn/posts/combining-xray-with-v2rayn-and-proxifier/"},{"categories":["科学上网"],"content":"v2rayN配置 ","date":"2023-01-13","objectID":"/zh-cn/posts/combining-xray-with-v2rayn-and-proxifier/:1:1","tags":["工具"],"title":"Xray的使用-v2rayN与Proxifier结合","uri":"/zh-cn/posts/combining-xray-with-v2rayn-and-proxifier/"},{"categories":["科学上网"],"content":"Proxifier配置 xray.exe可以不用自己添加，改localhost的target Port就行 ","date":"2023-01-13","objectID":"/zh-cn/posts/combining-xray-with-v2rayn-and-proxifier/:1:2","tags":["工具"],"title":"Xray的使用-v2rayN与Proxifier结合","uri":"/zh-cn/posts/combining-xray-with-v2rayn-and-proxifier/"},{"categories":["科学上网"],"content":"IOS 还没搞 ","date":"2023-01-13","objectID":"/zh-cn/posts/combining-xray-with-v2rayn-and-proxifier/:2:0","tags":["工具"],"title":"Xray的使用-v2rayN与Proxifier结合","uri":"/zh-cn/posts/combining-xray-with-v2rayn-and-proxifier/"},{"categories":["科学上网"],"content":"MacOs 和Win类似的配置方法 ","date":"2023-01-13","objectID":"/zh-cn/posts/combining-xray-with-v2rayn-and-proxifier/:3:0","tags":["工具"],"title":"Xray的使用-v2rayN与Proxifier结合","uri":"/zh-cn/posts/combining-xray-with-v2rayn-and-proxifier/"},{"categories":null,"content":"Update At 4/25/2023 在更新证书的过程中，发现自动更新的脚本是没用的，干脆自己按申请的步骤重写了一份脚本，每次运行重新安装证书，使用时替换对应的域名/网站根页面地址/证书安装路径 不过申请的次数太频繁了。。。暂时被ban了，还没验证这个脚本的可用性。不过我觉得是可用的！下次证书过期了再执行验证8 ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:1:0","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"Update At 5/1/2023 已验证可用 #!/bin/bash rm -rf ~/.acme.sh echo \"Clear acme\" wget -O - https://get.acme.sh | sh cd ~/.acme.sh/ echo \"Download acme\" sh acme.sh --upgrade --auto-upgrade echo \"Set acme auto upgrade\" sh acme.sh --issue --server letsencrypt --test -d proxy.halfstack.net -w /home/summer/www/webpage --keylength ec-256 echo \"Test Generate Cert\" sh acme.sh --set-default-ca --server letsencrypt echo \"Change Default CA\" sh acme.sh --issue -d proxy.halfstack.net -w /home/summer/www/webpage --keylength ec-256 --force echo \"Apply Cert\" sh acme.sh --installcert -d proxy.halfstack.net --cert-file ~/keys/cert.crt --key-file ~/keys/cert.key --fullchain-file ~/keys/fullchain.crt --ecc echo \"Install Cert\" chmod +r /home/summer/xray_cert/xray.key echo \"Read Permission Granted for Private Key\" sudo systemctl restart xray echo \"Xray Restarted\" ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:2:0","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"Update At 4/23/2023 我在使用acme生成证书时，使用的是http方式，因此在自动更新脚本运行时，会访问80端口，但是由于nginx最终的配置中设置了强制https跳转，而443端口由xray监听，最终回落到8080端口，导致acme证书没法生成，进而导致证书更新失败。 针对这种情况，暂时的解决方法是将nginx的强制https跳转关掉，正常让80端口访问webpage ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:3:0","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"背景 用shadowsocks，没两天vps的ip就被gfw狠狠gank了 仅做个人记录，vps为GoDaddy VPS4，Centos7，美西机房。 ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:4:0","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"需要的东西 域名 vps 没了 ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:5:0","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"参考文档 https://xtls.github.io/document/level-0/ch07-xray-server.html#_7-1-%E5%8D%9A%E8%A7%82%E8%80%8C%E7%BA%A6%E5%8F%96-%E5%8E%9A%E7%A7%AF%E8%80%8C%E8%96%84%E5%8F%91 https://gaozhiyuan.net/server/centos-7-bbr.html ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:6:0","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"具体操作 ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:7:0","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"重建vps 从最干净的vps开始。 ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:7:1","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"bbr开启 ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:8:0","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"更新源 yum update ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:8:1","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"安装elrepo并升级内核 rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm yum --enablerepo=elrepo-kernel install kernel-ml -y ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:8:2","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"更新grub文件 \u0026\u0026 reboot [root@89 ~]# egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \\' CentOS Linux (6.1.4-1.el7.elrepo.x86_64) 7 (Core) CentOS Linux 7 Rescue 05121276371f496993086411838f1b53 (3.10.0-1160.81.1.el7.x86_64) CentOS Linux (3.10.0-1160.81.1.el7.x86_64) 7 (Core) CentOS Linux (3.10.0-1160.76.1.el7.x86_64) 7 (Core) CentOS Linux (3.10.0-1160.45.1.el7.x86_64) 7 (Core) CentOS Linux (0-rescue-754f8a1ad2654504b10cacfb2e9d5eb0) 7 (Core) [root@89 ~]# grub2-set-default 0 //这个0是上面这个命令打印出来的最高版本内核的index，根据自己的来换，一般是0 [root@89 ~]# reboot ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:8:3","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"检查一下当前的内核版本 [root@89 ~]# uname -r 6.1.4-1.el7.elrepo.x86_64 //注意要大于4.9 ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:8:4","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"开启bbr [root@89 ~]# vim /etc/sysctl.conf //添加下面打印出来的两行 [root@89 ~]# sysctl -p net.core.default_qdisc = fq net.ipv4.tcp_congestion_control = bbr ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:8:5","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"确认bbr开启 [root@89 ~]# sysctl net.ipv4.tcp_available_congestion_control net.ipv4.tcp_available_congestion_control = reno cubic bbr [root@89 ~]# lsmod | grep bbr tcp_bbr 20480 1 ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:8:6","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"VPS基础配置修改（爱做不做） ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:9:0","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"给非root用户添加sudo权限（如果没有的话新建一个用户） 安装sudo\u0026\u0026添加权限： [root@89 ~]# yum -y install sudo [root@89 ~]# visudo //在root ALL=(ALL) ALL下面加入 //用户名 ALL=(ALL) ALL 关闭Root的SSH等 网站建设 ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:9:1","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"配置 EPEL 源 \u0026\u0026 安装 Nginx [summer@89 ~]$ sudo yum install -y epel-release \u0026\u0026 sudo yum -y update sudo yum install -y nginx [summer@89 ~]$ mkdir -p ~/www/webpage/ \u0026\u0026 nano ~/www/webpage/index.html ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:9:2","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"安装nano [summer@89 ~]$ sudo yum -y install nano ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:9:3","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"配一个静态页面 [summer@89 ~]$ nano ~/www/webpage/index.html 填入以下html代码 \u003chtml lang=\"\"\u003e \u003c!-- Text between angle brackets is an HTML tag and is not displayed. Most tags, such as the HTML and /HTML tags that surround the contents of a page, come in pairs; some tags, like HR, for a horizontal rule, stand alone. Comments, such as the text you're reading, are not displayed when the Web page is shown. The information between the HEAD and /HEAD tags is not displayed. The information between the BODY and /BODY tags is displayed.--\u003e \u003chead\u003e \u003ctitle\u003eEnter a title, displayed at the top of the window.\u003c/title\u003e \u003c/head\u003e \u003c!-- The information between the BODY and /BODY tags is displayed.--\u003e \u003cbody\u003e \u003ch1\u003eEnter the main heading, usually the same as the title.\u003c/h1\u003e \u003cp\u003eBe \u003cb\u003ebold\u003c/b\u003e in stating your key points. Put them in a list:\u003c/p\u003e \u003cul\u003e \u003cli\u003eThe first item in your list\u003c/li\u003e \u003cli\u003eThe second item; \u003ci\u003eitalicize\u003c/i\u003e key words\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eImprove your image by including an image.\u003c/p\u003e \u003cp\u003e \u003cimg src=\"https://i.imgur.com/SEBww.jpg\" alt=\"A Great HTML Resource\" /\u003e \u003c/p\u003e \u003cp\u003e Add a link to your favorite \u003ca href=\"https://www.dummies.com/\"\u003eWeb site\u003c/a\u003e. Break up your page with a horizontal rule or two. \u003c/p\u003e \u003chr /\u003e \u003cp\u003e Finally, link to \u003ca href=\"page2.html\"\u003eanother page\u003c/a\u003e in your own Web site. \u003c/p\u003e \u003c!-- And add a copyright notice.--\u003e \u003cp\u003e\u0026#169; Wiley Publishing, 2011\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:9:4","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"修改nginx配置 [summer@89 webpage]$ sudo nano /etc/nginx/nginx.conf 修改user为当前用户 在http下添加： server { listen 80; server_name proxy.halfstack.net; root /home/summer/www/webpage; index index.html; } ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:9:5","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"重启nginx [summer@89 www]$ sudo systemctl restart nginx ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:9:6","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"证书管理 ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:10:0","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"安装acme [summer@89 www]$ wget -O - https://get.acme.sh | sh [summer@89 ~]$ . .bashrc ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:10:1","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"开启acme自动升级 [summer@89 ~]$ acme.sh --upgrade --auto-upgrade [Wed Jan 11 14:41:28 UTC 2023] Already uptodate! [Wed Jan 11 14:41:28 UTC 2023] Upgrade success! ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:10:2","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"测试证书申请 [summer@89 ~]$ acme.sh --issue --server letsencrypt --test -d proxy.halfstack.net -w /home/summer/www/webpage --keylength ec-256 有问题添加–debug查看详情 ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:10:3","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"正式申请证书 [summer@89 ~]$ acme.sh --set-default-ca --server letsencrypt [Wed Jan 11 14:47:20 UTC 2023] Changed default CA to: https://acme-v02.api.letsencrypt.org/directory [summer@89 ~]$ acme.sh --issue -d proxy.halfstack.net -w /home/summer/www/webpage --keylength ec-256 --force ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:10:4","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"安装证书 [summer@89 ~]$ mkdir ~/keys [summer@89 ~]$ acme.sh --installcert -d proxy.halfstack.net --cert-file ~/keys/cert.crt --key-file ~/keys/cert.key --fullchain-file ~/keys/fullchain.crt --ecc [Wed Jan 11 14:51:09 UTC 2023] Installing cert to: /home/summer/keys/cert.crt [Wed Jan 11 14:51:09 UTC 2023] Installing key to: /home/summer/keys/cert.key [Wed Jan 11 14:51:09 UTC 2023] Installing full chain to: /home/summer/keys/fullchain.crt ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:10:5","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"Xray服务端 ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:11:0","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"安装Xray 下载安装脚本 [summer@89 ~]$ wget https://github.com/XTLS/Xray-install/raw/main/install-release.sh 运行安装脚本 [summer@89 ~]$ sudo bash install-release.sh 删除安装脚本 [summer@89 ~]$ rm ~/install-release.sh ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:11:1","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"给Xray配置TLS证书 [summer@89 ~]$ mkdir ~/xray_cert [summer@89 ~]$ acme.sh --install-cert -d proxy.halfstack.net --ecc \\ --fullchain-file ~/xray_cert/xray.crt \\ --key-file ~/xray_cert/xray.key [Wed Jan 11 14:57:07 UTC 2023] Installing key to: /home/summer/xray_cert/xray.key [Wed Jan 11 14:57:07 UTC 2023] Installing full chain to: /home/summer/xray_cert/xray.crt 增加其他用户可读权限 [summer@89 ~]$ chmod +r ~/xray_cert/xray.key [summer@89 ~]$ chmod +x /home/summer/ ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:11:2","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"建立Cronjob更新证书 nano ~/xray_cert/xray-cert-renew.sh #!/bin/bash /home/summer/.acme.sh/acme.sh --install-cert -d proxy.halfstack.net --ecc --fullchain-file /home/summer/xray_cert/xray.crt --key-file /home/summer/xray_cert/xray.key echo \"Xray Certificates Renewed\" chmod +r /home/summer/xray_cert/xray.key echo \"Read Permission Granted for Private Key\" sudo systemctl restart xray echo \"Xray Restarted\" 添加可执行权限 chmod +x ~/xray_cert/xray-cert-renew.sh 添加定时任务 [summer@89 xray_cert]$ crontab -e 添加： # 1:00am, 1st day each month, run `xray-cert-renew.sh` 0 1 1 * * bash /home/summer/xray_cert/xray-cert-renew.sh ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:11:3","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"生成UUID [summer@89 xray_cert]$ xray uuid ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:11:4","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"创建日志文件 [summer@89 ~]$ mkdir ~/xray_log [summer@89 ~]$ touch ~/xray_log/access.log \u0026\u0026 touch ~/xray_log/error.log [summer@89 ~]$ chmod a+w ~/xray_log/*.log ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:11:5","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"修改配置文件 [summer@89 ~]$ sudo nano /usr/local/etc/xray/config.json 添加： // REFERENCE: // https://github.com/XTLS/Xray-examples // https://xtls.github.io/config/ // 常用的 config 文件，不论服务器端还是客户端，都有 5 个部分。外加小小白解读： // ┌─ 1*log 日志设置 - 日志写什么，写哪里（出错时有据可查） // ├─ 2_dns DNS-设置 - DNS 怎么查（防 DNS 污染、防偷窥、避免国内外站匹配到国外服务器等） // ├─ 3_routing 分流设置 - 流量怎么分类处理（是否过滤广告、是否国内外分流） // ├─ 4_inbounds 入站设置 - 什么流量可以流入 Xray // └─ 5_outbounds 出站设置 - 流出 Xray 的流量往哪里去 { // 1\\_日志设置 \"log\": { \"loglevel\": \"warning\", // 内容从少到多: \"none\", \"error\", \"warning\", \"info\", \"debug\" \"access\": \"/home/summer/xray_log/access.log\", // 访问记录 \"error\": \"/home/summer/xray_log/error.log\" // 错误记录 }, // 2_DNS 设置 \"dns\": { \"servers\": [ \"https+local://1.1.1.1/dns-query\", // 首选 1.1.1.1 的 DoH 查询，牺牲速度但可防止 ISP 偷窥 \"localhost\" ] }, // 3*分流设置 \"routing\": { \"domainStrategy\": \"IPIfNonMatch\", \"rules\": [ // 3.1 防止服务器本地流转问题：如内网被攻击或滥用、错误的本地回环等 { \"type\": \"field\", \"ip\": [ \"geoip:private\" // 分流条件：geoip 文件内，名为\"private\"的规则（本地） ], \"outboundTag\": \"block\" // 分流策略：交给出站\"block\"处理（黑洞屏蔽） }, { // 3.2 防止服务器直连国内 \"type\": \"field\", \"ip\": [\"geoip:cn\"], \"outboundTag\": \"block\" }, // 3.3 屏蔽广告 { \"type\": \"field\", \"domain\": [ \"geosite:category-ads-all\" // 分流条件：geosite 文件内，名为\"category-ads-all\"的规则（各种广告域名） ], \"outboundTag\": \"block\" // 分流策略：交给出站\"block\"处理（黑洞屏蔽） } ] }, // 4*入站设置 // 4.1 这里只写了一个最简单的 vless+xtls 的入站，因为这是 Xray 最强大的模式。如有其他需要，请根据模版自行添加。 \"inbounds\": [ { \"port\": 443, \"protocol\": \"vless\", \"settings\": { \"clients\": [ { \"id\": \"\", // 填写你的 UUID \"flow\": \"xtls-rprx-vision\", \"level\": 0, \"email\": \"summer@yourdomain.com\" } ], \"decryption\": \"none\", \"fallbacks\": [ { \"alpn\":\"h2\", \"dest\": 8080 // 默认回落到防探测的代理 } ] }, \"streamSettings\": { \"network\": \"tcp\", \"security\": \"tls\", \"tlsSettings\": { \"certificates\": [ { \"certificateFile\": \"/home/summer/xray_cert/xray.crt\", \"keyFile\": \"/home/summer/xray_cert/xray.key\" } ], \"serverName\":\"proxy.halfstack.net\", \"alpn\" : [ \"h2\", \"http/1.1\" ] } } } ], // 5*出站设置 \"outbounds\": [ // 5.1 第一个出站是默认规则，freedom 就是对外直连（vps 已经是外网，所以直连） { \"tag\": \"direct\", \"protocol\": \"freedom\" }, // 5.2 屏蔽规则，blackhole 协议就是把流量导入到黑洞里（屏蔽） { \"tag\": \"block\", \"protocol\": \"blackhole\" } ] } ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:11:6","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"启动Xray [summer@89 ~]$ sudo systemctl start xray [summer@89 ~]$ sudo systemctl status xray ● xray.service - Xray Service Loaded: loaded (/etc/systemd/system/xray.service; enabled; vendor preset: disabled) Drop-In: /etc/systemd/system/xray.service.d └─10-donot_touch_single_conf.conf Active: active (running) since Wed 2023-01-11 14:53:20 UTC; 31min ago Docs: https://github.com/xtls Main PID: 21082 (xray) CGroup: /system.slice/xray.service └─21082 /usr/local/bin/xray run -config /usr/local/etc/xray/config.json Jan 11 14:53:20 89.202.178.68.host.secureserver.net systemd[1]: Started Xray Service. Jan 11 14:53:20 89.202.178.68.host.secureserver.net xray[21082]: Xray 1.7.2 (Xray, Penetrates Everything.) Custom (go1.19.4 linux/amd64) Jan 11 14:53:20 89.202.178.68.host.secureserver.net xray[21082]: A unified platform for anti-censorship. Jan 11 14:53:20 89.202.178.68.host.secureserver.net xray[21082]: 2023/01/11 14:53:20 [Info] infra/conf/serial: Reading config: /usr/local/etc/xray/config.json Jan 11 14:53:20 89.202.178.68.host.secureserver.net xray[21082]: 2023/01/11 14:53:20 [Warning] core: Xray 1.7.2 started ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:12:0","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"HTTPS跳转 修改nginx配置 [summer@89 ~]$ sudo nano /etc/nginx/nginx.conf 改成这样： server { listen 80; server_name proxy.halfstack.net; return 301 https://$http_host$request_uri; } server { listen 8080 http2; root /home/summer/www/webpage; index index.html; add_header Strict-Transport-Security \"max-age=63072000\" always; } [summer@89 ~]$ sudo systemctl restart nginx ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:12:1","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":null,"content":"修改xray回落 [summer@89 ~]$ sudo nano /usr/local/etc/xray/config.json [summer@89 ~]$ sudo systemctl restart xray ","date":"2023-01-12","objectID":"/zh-cn/posts/setting-up-xray-server-on-centos7/:12:2","tags":["工具","记录"],"title":"CentOS7搭建Xray-服务端","uri":"/zh-cn/posts/setting-up-xray-server-on-centos7/"},{"categories":["科学上网"],"content":"通过GoDaddy VPS和ShadowSocks搭建代理实现科学上网 ","date":"2023-01-07","objectID":"/zh-cn/posts/establishing-a-proxy-for-accessing-the-internet-through-godaddy-vps-and-shadowsocks/:0:0","tags":["工具"],"title":"通过GoDaddy VPS和ShadowSocks搭建代理实现科学上网","uri":"/zh-cn/posts/establishing-a-proxy-for-accessing-the-internet-through-godaddy-vps-and-shadowsocks/"},{"categories":["科学上网"],"content":"背景 在GoDaddy主机上配置Shadowsocks，客户端通过链接代理端口实现科学上网 前段时间VPN又续费了一年，正在使用的VPN虽然十分稳定，不限流量，不限带宽，同时使用设备数多，全平台，节点遍布欧美东亚南亚，价格不贵… （tmd，这VPN是有点好用的） 唯一的缺点是没有办法自己配置规则决定是否直连or代理，导致一些网站总是重定向回.cn，无法访问.com/.net，比如leetcode.com, linkedin.com。 昨天看到了一篇关于ssh命令的黑科技教学，其中包含“一行ssh实现科学上网”，突然就有了兴致，想到为了构建这个博客网站购买了海外的服务器，就在思考要不自己搭建一个代理实现科学上网，这样也能多利用这个网站的服务器资源（毕竟我日常摆烂懒得更新，加上本来也没什么人浏览）。毕竟虽然更新很少，但是还是打算长期维护域名+服务器资源，如果搭建的代理好用的话也可以省下额外订阅VPN的钱了。 ssh命令，原理解释见原文 nohup ssh -qTfnN -D 127.0.0.1:38080 root@1.1.1.1 \"vmstat 10\" 2\u003e\u00261 \u003e/dev/null \u0026 ","date":"2023-01-07","objectID":"/zh-cn/posts/establishing-a-proxy-for-accessing-the-internet-through-godaddy-vps-and-shadowsocks/:1:0","tags":["工具"],"title":"通过GoDaddy VPS和ShadowSocks搭建代理实现科学上网","uri":"/zh-cn/posts/establishing-a-proxy-for-accessing-the-internet-through-godaddy-vps-and-shadowsocks/"},{"categories":["科学上网"],"content":"GoDaddy VPS上Shadowsocks搭建 涉及到的教学原文并不能够完美运行，如果云服务器是新搭建的话，会因为一些基础依赖的缺少而导致部分命令无法运行成功。遇到错误的话可以参考我的流程，也许能帮到你。如果你的服务器已经用了挺久了，该有的运行环境都有，可以直接看具体的教学，跟着教学一步步走就好了。 教学中的各类命令适用于Linux or Mac OS，而我自用的机器只有一台win，日常也不会在win上搞这些东西，只是用来打游戏，因此对win上的命令行操作是一点不懂（有够菜的），所以没打算再重新学习这些命令在win上该怎么实现，转向shadowsocks相关的教学。 到了这个shadowsocks的教学才发现，原来我在Godaddy上购买的并不是VPS，而是专门针对网站搭建的Web hosting。这一步花费了我不少时间确认，如果是没有海外服务器的朋友，记得确认好准备购买的是否是云服务器(Server)，我认为最简单的方法就是确认 你能不能拿到服务器的root权限 。 关于服务器规格。1core1G十分够用了（这是GoDaddy上的VPS最小规格），如果你在别的平台购买，目的仅仅是为了搭建代理的话，选最小的套餐就是了。 关于服务器提供商。比起教学中推荐的VPS，GoDaddy似乎也是5美金一个月，同时有免费的自动备份，好像更值当一些？大家自行选择，只需要能有一个海外的VPS就行了。 关于服务器位置。我选择的是在美西的服务器，是因为我个人一些电子移民的账号都在美国地区，透过美西的服务器代理访问的话，应该可以减少一些账号风控检测导致的账号封禁（都是钱哎）。比如GV现在只提供美国\u0026加拿大地区的服务，不使用美加的IP的话似乎是无法使用的。个人根据个人的需求进行选择吧。毕竟如果服务器在日本、香港、新加坡这些亚太地区的话延迟更低一些，可能更适合日常使用。兴许以后我会额外买一个新加坡地区的VPS通过代理去打Apex，这样又省下了加速器的钱（明明为了服务器会花更多 关于服务器系统。我选择的是CentOS7，因为教学有傻瓜操作脚本可以用 VPS有了之后，win上用powerShell通过ssh登上服务器的root用户，或者用XShell建立和服务器的会话。mac就直接在终端ssh就好了 执行傻瓜脚本：脚本执行过程的一些选项选择参考 教学 wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh chmod +x shadowsocks-all.sh ./shadowsocks-all.sh 2\u003e\u00261 | tee shadowsocks-all.log 解释一下命令： wget是从指定的链接中下载文件，-O参数指定保存的文件名， --no-check-certificate代表这次下载不检查这个链接的CA证书 chmod -x 会将文件转为可执行文件 ./filename.sh 执行.sh文件，2 和 1都是文件描述符，1代表标准输出(stdout)，2代表标准错误(stderr)，\u003e 是重定向，如果仅仅是2\u003e1，代表的含义是，将.sh文件执行的标准错误重定向到文件名为1的文件中。如果想要将标准错误重定向到标准输出中，需要在1前加\u0026，完整的./shadowsocks-all.sh 2\u003e\u00261意味是：执行shadowsocks-all.sh，将标准错误重定向至标准输出流中，可以理解为将标准输出流和标准错误流合并。 | tee shadowsocks-all.log，|是linux中的管道符，会将前面的输出作为后面命令的输入。tee命令用于读取标准输入流将其输出到标准输出流或者文件中，tee shadowsocks-all.log就是将tee读到的标准输入输出到shadowsocks-all.log文件中。 完整命令./shadowsocks-all.sh 2\u003e\u00261 | tee shadowsocks-all.log的意思就是，执行shadowsocks-all.sh文件，将执行得到的stderr合并到stdout中，通过管道作为tee命令的stdin，将其输出到shadowsocks-all.log文件中。 对于新购买了centos7服务器的朋友，在执行sh文件之前，需要下载\u0026\u0026更新一些依赖，可以： 升级python版本到3.9.16，centos7自带的python版本为2.7，太老了，具体怎么升级网上很多教程。 安装zlib1g-dev sudo yum install zlib-devel ./configure --with-zlib ./configure --prefix=/opt/python2.7 + other options make make install 第4步成功之后，就没有卡点了，剩下的就是客户端的配置，参考教学，我就不细说了。 ","date":"2023-01-07","objectID":"/zh-cn/posts/establishing-a-proxy-for-accessing-the-internet-through-godaddy-vps-and-shadowsocks/:2:0","tags":["工具"],"title":"通过GoDaddy VPS和ShadowSocks搭建代理实现科学上网","uri":"/zh-cn/posts/establishing-a-proxy-for-accessing-the-internet-through-godaddy-vps-and-shadowsocks/"},{"categories":["科学上网"],"content":"ShadowRocket IOS客户端的使用 在配置shadowsocks的服务端的时候，会选择加密方式，关于加密方式的对比点击这里。教学中建议选择的是xchacha20-ietf-poly1305 ，现在使用较多的代理软件应该是patatso和shadowRocket，功能更全面更强大（更贵）的app也有，不过我觉得对于只是需要基本的代理配置的朋友们应该和我一样用这些比较基础的就好了。需要一个非国区的apple账号才可以下载，shadowrocket要2.99$，patatso免费。 但patatso中，加密方式的选择支持chacha20-ietf-poly1305，而不支持xchacha20-ietf-poly1305，因此如果想用patatso的朋友不要选择xchacha20-ietf-poly1305这个加密方式，但换别的加密方式，请自行对比，因为我没有用过，但是我猜测chacha20-ietf-poly1305也能够满足使用。 如果没有visa、paypal等非人民币支付方式，可以通过苹果的礼品卡赠送apple store余额给非国区账号，礼品卡可以使用国内的支付方式支付，然后再购买shadowrocket。 然后就是一些shadowrocket的配置，我现在使用的是自动打开vpn+按场景转发，始终保持vpn打开状态，根据当前网络选择是否代理、代理使用的配置等。比如家里的WIFI与蜂窝网络会根据default.conf决定是否走代理，其他网络比如公司的WIFI就直连目标不走代理。这样就不会连着公司WIFI穿梭到外网区了还走一遍代理。 ","date":"2023-01-07","objectID":"/zh-cn/posts/establishing-a-proxy-for-accessing-the-internet-through-godaddy-vps-and-shadowsocks/:3:0","tags":["工具"],"title":"通过GoDaddy VPS和ShadowSocks搭建代理实现科学上网","uri":"/zh-cn/posts/establishing-a-proxy-for-accessing-the-internet-through-godaddy-vps-and-shadowsocks/"},{"categories":["科学上网"],"content":"其他 后续应该会将网站的数据备份后转移到VPS中来，webhosting到期后就不再续期了，感觉又是一个很浪费时间的事情，因为网站是基于wordpress搭建的，GoDaddy提供的webhosting可以自动配置完成wordpress的东西，转移到VPS上的话wordpress需要我自己重新搭建一遍，不知道是否GoDaddy搭建的wordpress和官方的版本是否有区别（只希望存储没区别，这样我的备份可以直接转移） ","date":"2023-01-07","objectID":"/zh-cn/posts/establishing-a-proxy-for-accessing-the-internet-through-godaddy-vps-and-shadowsocks/:4:0","tags":["工具"],"title":"通过GoDaddy VPS和ShadowSocks搭建代理实现科学上网","uri":"/zh-cn/posts/establishing-a-proxy-for-accessing-the-internet-through-godaddy-vps-and-shadowsocks/"},{"categories":null,"content":"周一的时候在LeetCode写每日一题，一道很白的LIS。从以前打比赛开始就基本没怎么写过LIS。工作之后就更没有机会接触这些算法，这次刚好遇到了LIS的题目，想着用O(nlogn)写一下，发现一时半会想不起来是怎么实现的了。折磨了自己一会之后，决定还是好好学一下nlogn的解。由于个人学算法的时候还是更习惯有个具像化的运行逻辑，再根据逻辑记忆代码的实际逻辑，所以对着LIS的nlogn解法一顿猛搜，发现好像大家都只是说出了代码怎么运行，没有说过为什么是这样运行。 因此我一顿Google之后，发现LIS的nlogn解法出处并非是用于解决LIS问题的，而是一种纸牌游戏patience game。 具体的规则如下： 按照顺序将当前的纸牌放入某一个堆中，如果当前牌的大小 x 大于所有牌堆最上方的牌的大小，那么就在最右边新建一个牌堆，将牌放置在新堆上。 如果 x 小于部分牌堆最上方的牌，那么就将 x 放置在所有合法堆中 最左边 的牌堆上。 重复1、2步，直到将所有牌都分堆完成。 这样的放置方法首先保证了：所有堆的堆顶，牌面大小从左到右为递增的。 如下图所示，将[6,4,5,1,8,7,2,3]这8张牌，依照规则放置分堆。最后得到共3个牌堆。 分别为：[1,4,6], [2, 5], [3,7,8]（下标小的为堆底） 想想就会明白，按照这样的规则分堆之后，堆的数量就是这个数组的LIS长度：首先，对于当前数x，如果不存在任意一个堆顶大于x，x将会新建一个堆（堆数+1）对应的，也就是LIS长度+1，如果存在某一个LIS串的一个数 y 大于 x ，那么用 x 来代替 y 在长度为以 y 结尾的LIS串，只会更利于扩张此LIS串的长度，因为 x \u003c y。经过这样的规则分堆， 而第二步的放置方法，就是LIS的logn部分：设dp[i] = 长度为 i 的LIS串中，末尾最小的数。 if (nums[i] \u003e dp[ans]) dp[++ans] = nums[i]; else dp[lower_bound(dp, dp + ans + 1, nums[i]) - dp] = nums[i]; 这个纸牌游戏除去可以以nlogn复杂度解决LIS问题外，也延伸出了一种新的排序算法：patience sorting，通过上面的规则将纸牌分堆之后，再使用插入排序，完成对无序数组的排序。实际上就是通过分堆数组，来减少插入排序的遍历次数，从而加快插入排序。 每日一题的AC代码： int lengthOfLIS(vector\u003cint\u003e\u0026 nums) { int n = nums.size(); int dp[n]; for(int i = 0; i \u003c n; ++i){ dp[i] = 0x3f3f3f3f; } int ans = 0; dp[0] = nums[0]; for(int i = 1; i \u003c n; ++i){ if (nums[i] \u003e dp[ans]) dp[++ans] = nums[i]; else dp[lower_bound(dp, dp + ans + 1, nums[i]) - dp] = nums[i]; } return ans + 1; } ","date":"2022-08-11","objectID":"/zh-cn/posts/tracing-back-to-the-lis-with-time-complexity-of-nlogn/:0:0","tags":null,"title":"溯源：LIS的O(Nlogn)时间复杂度算法","uri":"/zh-cn/posts/tracing-back-to-the-lis-with-time-complexity-of-nlogn/"},{"categories":null,"content":"原题链接 https://leetcode.com/problems/mirror-reflection/ ","date":"2022-08-05","objectID":"/zh-cn/posts/leetcode-858-mirror-reflection-medium/:0:0","tags":null,"title":"LeetCode 858 Mirror Reflection /Medium","uri":"/zh-cn/posts/leetcode-858-mirror-reflection-medium/"},{"categories":null,"content":"题目描述 ","date":"2022-08-05","objectID":"/zh-cn/posts/leetcode-858-mirror-reflection-medium/:0:1","tags":null,"title":"LeetCode 858 Mirror Reflection /Medium","uri":"/zh-cn/posts/leetcode-858-mirror-reflection-medium/"},{"categories":null,"content":"思路 镜面反射是个很有意思的东西，以题中的图为例，如果我们忽略上侧的镜面，同时将左右侧镜面无限向上延伸：当从原点发出的光线通过右侧镜面反射的时候，接触到左侧镜面的高度，实际上就是 2q。左侧镜面反射后，接触到右侧镜面的高度是 3q，依次类推下去，可以明白，每一次接触到两侧镜面，高度差都是q的整数倍。 同样也是由于镜面反射，在上例中，实际上2q的位置x，与不忽视上侧镜面，通过反射后打到的左侧镜面的位置y，是以上镜面为对称轴对称的，如下图所示。 假设y点的光反射出去后，击中的位置为 0点，x点反射出去的光，由于与y点反射出的光对称，因此击中的下个高度为3q的点也为 0点。 因此我们可以不去计算每次反射之后具体的下次反射位置，而是通过计算以上例的情况，第一次击中高度为p的整数倍的位置，因为是p的整数倍，也就意味着达到了题目的要求，击中了0、1、2三个点中的某一个。 比较特殊的是：想要击中高度为2p的左侧镜面，在此之前一定曾经过 1点，因此最后计算出的光线终点为左侧镜面的2p高度，则答案为 1点。 根据上面的条件，很显然：最终高度为 LCM(p, q)。设 tq = lcm / q; tp = lcm / p。可以看出，tp的奇偶性决定击中哪个点（因为不管是在哪边镜面，答案都是交替分布的），tq的奇偶性则决定了击中左侧镜面还是右侧镜面（一次反射改变一次答案）。 实际上从结果的答案来看，光线最多反射tq次，tq为lcm(p, q) / q，因此反射次数取决于pq的最小公倍数，也最多就1e6级别，如果暴力求解的话，应该也是可行的。只需要封装一个方法用于计算下次反射落点。 ","date":"2022-08-05","objectID":"/zh-cn/posts/leetcode-858-mirror-reflection-medium/:0:2","tags":null,"title":"LeetCode 858 Mirror Reflection /Medium","uri":"/zh-cn/posts/leetcode-858-mirror-reflection-medium/"},{"categories":null,"content":"AC代码 class Solution { public: int mirrorReflection(int p, int q) { int tp = lcm(p, q) / p; int tq = lcm(p, q) / q; if(tq \u0026 1){ if(tp \u0026 1) return 1; else return 0; } else { if(tp \u0026 1) return 2; else return 1; } } int lcm(int x, int y){ return x * y / gcd(x, y); } int gcd(int x, int y){ return x % y == 0 ? y : gcd(y, x % y); } }; ","date":"2022-08-05","objectID":"/zh-cn/posts/leetcode-858-mirror-reflection-medium/:0:3","tags":null,"title":"LeetCode 858 Mirror Reflection /Medium","uri":"/zh-cn/posts/leetcode-858-mirror-reflection-medium/"},{"categories":null,"content":"原题链接 https://leetcode.com/problems/my-calendar-i/ ","date":"2022-08-03","objectID":"/zh-cn/posts/leetcode-729-my-calendar-i-medium/:0:0","tags":null,"title":"LeetCode 729 My Calendar I /Medium","uri":"/zh-cn/posts/leetcode-729-my-calendar-i-medium/"},{"categories":null,"content":"题目描述 ","date":"2022-08-03","objectID":"/zh-cn/posts/leetcode-729-my-calendar-i-medium/:0:1","tags":null,"title":"LeetCode 729 My Calendar I /Medium","uri":"/zh-cn/posts/leetcode-729-my-calendar-i-medium/"},{"categories":null,"content":"思路 数据范围来看可以接受O(n2)做法，看题目标题的意思会有进阶题，咱就是体现一个具体问题具体分析，暴力O(n2)解题。 用pair数组存储所有的事件起止时间，新事件来时遍历数组，判断是否存在重合点，存在则返回false，不存在append新事件到数组中，返回true。 ","date":"2022-08-03","objectID":"/zh-cn/posts/leetcode-729-my-calendar-i-medium/:0:2","tags":null,"title":"LeetCode 729 My Calendar I /Medium","uri":"/zh-cn/posts/leetcode-729-my-calendar-i-medium/"},{"categories":null,"content":"代码 class MyCalendar { public: pair\u003cint, int\u003e events[1005]; int tot; MyCalendar() { tot = 0; } bool book(int start, int end) { end--; for(int i = 0; i \u003c tot; ++i){ if(events[i].first \u003e end || events[i].second \u003c start) continue; return false; } events[tot++] = pair\u003cint, int\u003e(start, end); return true; } }; /** * Your MyCalendar object will be instantiated and called as such: * MyCalendar* obj = new MyCalendar(); * bool param_1 = obj-\u003ebook(start,end); */ ","date":"2022-08-03","objectID":"/zh-cn/posts/leetcode-729-my-calendar-i-medium/:0:3","tags":null,"title":"LeetCode 729 My Calendar I /Medium","uri":"/zh-cn/posts/leetcode-729-my-calendar-i-medium/"},{"categories":null,"content":"原题： https://leetcode.com/problems/range-sum-query-mutable/ 题意 给一个数组N，对数组 Ｎ 执行两类操作： Update：将N[index]的值修改为Value; Sum：输出Sum(N[left], N[right]). 思路 解法太多了，树状数组、线段树等。因为线段树写的比较多，可以不带脑子写出来，就直接写线段树了。 AC代码 class NumArray { public: NumArray(vector\u003cint\u003e\u0026 nums) { for(int i = 0; i \u003c nums.size(); ++i) n[i + 1] = nums[i]; l = nums.size(); build(1, l, 1); } void update(int index, int val) { updateNode(1, l, 1, index + 1, val); } int sumRange(int left, int right) { return sum(1, l, 1, left + 1, right + 1); } private: int n[30005]; int l; int node[30005 * 3]; void build(int l, int r, int k) { if(l == r){ node[k] = n[l]; return; } int mid = (l + r) \u003e\u003e 1; build(l, mid, k \u003c\u003c 1); build(mid + 1, r, k \u003c\u003c 1 | 1); node[k] = node[k \u003c\u003c 1] + node[k \u003c\u003c 1 | 1]; } void updateNode(int l, int r, int k, int x, int val){ if(l == r){ node[k] = val; return; } int mid = (l + r) \u003e\u003e 1; if(mid \u003c x) updateNode(mid + 1, r, k \u003c\u003c 1 | 1, x, val); else updateNode(l, mid, k \u003c\u003c 1, x, val); node[k] = node[k \u003c\u003c 1] + node[k \u003c\u003c 1 | 1]; } int sum(int l, int r, int k, int L, int R){ if(L \u003c= l \u0026\u0026 R \u003e= r) return node[k]; int ans = 0; int mid = (l + r) \u003e\u003e 1; if(L \u003c= mid) ans += sum(l, mid, k \u003c\u003c 1, L, R); if(R \u003e mid) ans += sum(mid + 1, r, k \u003c\u003c 1 | 1, L, R); return ans; } }; /** * Your NumArray object will be instantiated and called as such: * NumArray* obj = new NumArray(nums); * obj-\u003eupdate(index,val); * int param_2 = obj-\u003esumRange(left,right); */ ","date":"2022-07-31","objectID":"/zh-cn/posts/leetcode-307-range-sum-query-mutable/:0:0","tags":null,"title":"Leetcode 307 Range Sum Query Mutable /Medium","uri":"/zh-cn/posts/leetcode-307-range-sum-query-mutable/"},{"categories":["Codeforces"],"content":"评测机随机生成一个长度为 N 的字符串 S，有两种操作，通过两种操作和评测机交互，输出生成的字符串 S","date":"2022-07-09","objectID":"/zh-cn/posts/codeforces-1697-d-tutorial/","tags":["题解"],"title":"Codeforces 1697 D题解","uri":"/zh-cn/posts/codeforces-1697-d-tutorial/"},{"categories":["Codeforces"],"content":"D.Guess The String ","date":"2022-07-09","objectID":"/zh-cn/posts/codeforces-1697-d-tutorial/:1:0","tags":["题解"],"title":"Codeforces 1697 D题解","uri":"/zh-cn/posts/codeforces-1697-d-tutorial/"},{"categories":["Codeforces"],"content":"题意 交互题。评测机生成一个长度为 N 的字符串 S，有两种操作： 1 i，询问第 i 位字母是什么。 2 l r，询问区间 [l, r] 的子字符串字符集大小。 只允许提出至多26次操作1，至多6000次操作2，确定后输出生成的字符串S。 ","date":"2022-07-09","objectID":"/zh-cn/posts/codeforces-1697-d-tutorial/:1:1","tags":["题解"],"title":"Codeforces 1697 D题解","uri":"/zh-cn/posts/codeforces-1697-d-tutorial/"},{"categories":["Codeforces"],"content":"Sample Input 5 4 u 2 g e s 1 ","date":"2022-07-09","objectID":"/zh-cn/posts/codeforces-1697-d-tutorial/:1:2","tags":["题解"],"title":"Codeforces 1697 D题解","uri":"/zh-cn/posts/codeforces-1697-d-tutorial/"},{"categories":["Codeforces"],"content":"Sample Ouput ? 2 1 5 ? 1 2 ? 2 1 2 ? 1 1 ? 1 3 ? 1 4 ? 2 4 5 ! guess ","date":"2022-07-09","objectID":"/zh-cn/posts/codeforces-1697-d-tutorial/:1:3","tags":["题解"],"title":"Codeforces 1697 D题解","uri":"/zh-cn/posts/codeforces-1697-d-tutorial/"},{"categories":["Codeforces"],"content":"思路 首先可以猜到26个操作对应26个字母，发起操作1的时刻应当是第一次或者最后一次出现某个字母时，在这个交互题中，比较显然的是：如果从左到右构造字符串，第一次出现某字母，就发起操作1。那么顺其自然的就会需要解决一个问题：怎么知道当前字母是第一次出现？ 先定义f(x,y)代表[x, y]区间的子字符串的字符集大小。 解决这个问题的方式肯定是通过操作2，而操作2对应的询问得到的答案为字符集的大小。由于我们是顺序依次构造，因此当f(1,x)\u003ef(1,x - 1)的字符集大小大时，就意味着x这个位置出现的字母，从未出现在1~x中，因此就可以发起操作1去询问这个s[x]。通过这样的方式，我们就可以先确定每个字母出现的第一个位置。 以上的方式已经决定了，接下来要确定其他位置的字母，只能够通过操作2的询问。 假设最极端的情况，s[1] ~ s[26]都是不一样的字母，那么我们在最开头就花费了所有的操作1次数，同时也意味着s[27]一定是重复字母。 实际剩下的问题也是这样：当f(1,y) == f(y - 1) (y \u003e 1)时，如何确定s[y]。 实际上从题目所给出的限制可以得出：s[y]的询问次数，只能最多6次(6*1000)。此时只能通过操作2进行询问，操作2的反馈仅有字符集大小，而我们在此时是知道s[1] ~ s[y - 1]的所有字符。 字符集大小最大为26，而确定s[y]的操作次数上限为6次，比较容易想到的就是二分。问题中隐含的单调性则是：从左到右，字符串越长，字符集大小单调递增。因此我们可以二分字符集大小，来确定，s[y]处在二分区间的左半还是右半。我们可以计算得出的是：f(mid, y - 1)，通过询问得出f(mid, y)，如果f(mid, y - 1) == f(mid, y)，就意味着s[y]出现在了mid的左半边。 那么要符合这个等式得出的结论，需要先计算出f(mid, y - 1)，字符如果出现在[mid, y - 1]区间内，则最后一次出现的位置一定在[mid, y - 1]中（废话）。因此记录下每个字符出现的最后一个位置，然后计算[mid, y - 1]中多少个字符最后一次出现，就知道了f(mid, y -1)。 ","date":"2022-07-09","objectID":"/zh-cn/posts/codeforces-1697-d-tutorial/:1:4","tags":["题解"],"title":"Codeforces 1697 D题解","uri":"/zh-cn/posts/codeforces-1697-d-tutorial/"},{"categories":["Codeforces"],"content":"代码 void solveD(){ int n; scanf(\"%d\", \u0026n); char s[n + 5]; s[n + 1] = '\\0'; printf(\"? 1 1\\n\"); fflush(stdout); scanf(\" %c\", \u0026s[1]); PIC lastPos[26]; int tot = 1; lastPos[tot] = PIC(1, s[1]); for(int i = 2; i \u003c= n; ++i){ printf(\"? 2 1 %d\\n\", i); fflush(stdout); int sz; scanf(\" %d\", \u0026sz); if(sz != tot) { printf(\"? 1 %d\\n\", i); fflush(stdout); scanf(\" %c\", \u0026s[i]); lastPos[++tot] = PIC(i, s[i]); continue; } sort(lastPos + 1, lastPos + tot + 1); int l = 1, r = tot; int ans = 0; while(l \u003c= r){ int mid = l + r \u003e\u003e 1; printf(\"? 2 %d %d\\n\", lastPos[mid].first, i); fflush(stdout); scanf(\" %d\", \u0026sz); if(sz == tot - mid + 1) ans = mid, l = mid + 1; else r = mid - 1; } s[i] = lastPos[ans].second; lastPos[ans].first = i; } printf(\"! %s\\n\", s + 1); fflush(stdout); } ","date":"2022-07-09","objectID":"/zh-cn/posts/codeforces-1697-d-tutorial/:1:5","tags":["题解"],"title":"Codeforces 1697 D题解","uri":"/zh-cn/posts/codeforces-1697-d-tutorial/"}]