<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>priority_queue - Tag - Halfstack</title>
        <link>/en/tags/priority_queue/</link>
        <description>priority_queue - Tag - Halfstack</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>Oasis7311@gmail.com (Oasis)</managingEditor>
            <webMaster>Oasis7311@gmail.com (Oasis)</webMaster><lastBuildDate>Sun, 27 Aug 2023 10:40:00 &#43;0800</lastBuildDate><atom:link href="/en/tags/priority_queue/" rel="self" type="application/rss+xml" /><item>
    <title>403. Frog Jump</title>
    <link>/en/posts/lc/hard/0403_frog_jump/</link>
    <pubDate>Sun, 27 Aug 2023 10:40:00 &#43;0800</pubDate>
    <author>Oasis</author>
    <guid>/en/posts/lc/hard/0403_frog_jump/</guid>
    <description><![CDATA[https://leetcode.com/problems/frog-jump/
https://leetcode.com/problems/frog-jump/submissions/1032720945/
class Solution { public: bool check(unordered_map&lt;int, bool&gt;&amp; exist, unordered_map&lt;int, unordered_map&lt;int, bool&gt;&gt; &amp;inq, int lastStone, int nextStone, int jumpUnits) { if(inq[nextStone][jumpUnits]) return false; if(nextStone &gt; lastStone) return false; if(!exist[nextStone]) return false; return true; } bool canCross(vector&lt;int&gt;&amp; stones) { if(stones == (vector&lt;int&gt;){0,1}) { return true; } int n = stones.size(); if(stones.back() &gt; (n * (1 + n - 1) / 2)) { return false; } unordered_map&lt;int, bool&gt; exist; for(int i : stones) exist[i] = true; priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, less&lt;pair&lt;int, int&gt;&gt;&gt; q; unordered_map&lt;int, unordered_map&lt;int, bool&gt;&gt; inq; if(stones[1] !]]></description>
</item>
<item>
    <title>239. Sliding Window Maximum</title>
    <link>/en/posts/lc/hard/0239_sliding_window_maximum/</link>
    <pubDate>Wed, 16 Aug 2023 09:07:00 &#43;0800</pubDate>
    <author>Oasis</author>
    <guid>/en/posts/lc/hard/0239_sliding_window_maximum/</guid>
    <description><![CDATA[https://leetcode.com/problems/sliding-window-maximum/
https://leetcode.com/problems/sliding-window-maximum/submissions/1022554836/
class Solution { public: vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) { priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int,int&gt;&gt;, less&lt;pair&lt;int,int&gt;&gt;&gt; q; for(int i = 0; i &lt; k; ++i) { q.push(pair(nums[i],i)); } vector&lt;int&gt; ans; ans.push_back(q.top().first); for(int i = k; i &lt; nums.size(); ++i) { q.push(pair(nums[i], i)); auto t = q.top(); while(t.second &lt;= i - k) { q.pop(); t = q.top(); } ans.push_back(q.top().first); } return ans; } }; ]]></description>
</item>
<item>
    <title>4. Median of Two Sorted Arrays</title>
    <link>/en/posts/lc/hard/0004_median_of_two_sorted_arrays/</link>
    <pubDate>Sat, 28 May 2022 12:45:00 &#43;0800</pubDate>
    <author>Oasis</author>
    <guid>/en/posts/lc/hard/0004_median_of_two_sorted_arrays/</guid>
    <description><![CDATA[https://leetcode.com/problems/median-of-two-sorted-arrays/
https://leetcode.com/problems/median-of-two-sorted-arrays/submissions/708741884/
class Solution { public: double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) { priority_queue&lt;int&gt; q; for(int i : nums1) q.push(i); for(int i : nums2) q.push(i); int popCount = q.size() - 1 &gt;&gt; 1; bool d = (q.size() % 2 == 0); while(popCount--) q.pop(); double ans = 0; ans = q.top(); q.pop(); if(d){ ans = (q.top() + ans) / 2.0; } return ans; } }; ]]></description>
</item>
</channel>
</rss>
