<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>math - Tag - Halfstack</title>
        <link>/en/tags/math/</link>
        <description>math - Tag - Halfstack</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>Oasis7311@gmail.com (Oasis)</managingEditor>
            <webMaster>Oasis7311@gmail.com (Oasis)</webMaster><lastBuildDate>Wed, 30 Aug 2023 09:29:00 &#43;0800</lastBuildDate><atom:link href="/en/tags/math/" rel="self" type="application/rss+xml" /><item>
    <title>2366. Minimum Replacements to Sort the Array</title>
    <link>/en/posts/lc/hard/2366_minimum_replacements_to_sort_the_array/</link>
    <pubDate>Wed, 30 Aug 2023 09:29:00 &#43;0800</pubDate>
    <author>Oasis</author>
    <guid>/en/posts/lc/hard/2366_minimum_replacements_to_sort_the_array/</guid>
    <description><![CDATA[https://leetcode.com/problems/minimum-replacements-to-sort-the-array/description/
https://leetcode.com/problems/minimum-replacements-to-sort-the-array/submissions/1035547342/
class Solution { public: long long minimumReplacement(vector&lt;int&gt;&amp; nums) { long long ans = 0; int Max = nums.back(); for(int i = nums.size() - 2; i &gt;= 0; --i) { //cout &lt;&lt; i &lt;&lt; &#34; max = &#34; &lt;&lt; Max &lt;&lt; &#34; num = &#34; &lt;&lt; nums[i] &lt;&lt; endl; if(nums[i] &lt;= Max) { Max = nums[i]; continue; } int divisor = nums[i]; int dividend = Max; int mod = divisor % dividend; int quotient = divisor / dividend; if(mod == 0) { ans += quotient - 1; continue; } ans += quotient; // binary search to find max Max int l = mod, r = Max; while(l &lt;= r) { int mid = (l + r) &gt;&gt; 1; int gap = mid - mod; int times = gap / quotient; if(gap % quotient !]]></description>
</item>
</channel>
</rss>
