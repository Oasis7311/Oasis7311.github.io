<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Halfstack</title>
        <link>/en/</link>
        <description>Still have another half to learn</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>Oasis7311@gmail.com (Oasis)</managingEditor>
            <webMaster>Oasis7311@gmail.com (Oasis)</webMaster><lastBuildDate>Sun, 27 Aug 2023 10:40:00 &#43;0800</lastBuildDate>
            <atom:link href="/en/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>403. Frog Jump</title>
    <link>/en/posts/lc/0403_frog_jump/</link>
    <pubDate>Sun, 27 Aug 2023 10:40:00 &#43;0800</pubDate>
    <author>Oasis</author>
    <guid>/en/posts/lc/0403_frog_jump/</guid>
    <description><![CDATA[https://leetcode.com/problems/frog-jump/
https://leetcode.com/problems/frog-jump/submissions/1032720945/
class Solution { public: bool check(unordered_map&lt;int, bool&gt;&amp; exist, unordered_map&lt;int, unordered_map&lt;int, bool&gt;&gt; &amp;inq, int lastStone, int nextStone, int jumpUnits) { if(inq[nextStone][jumpUnits]) return false; if(nextStone &gt; lastStone) return false; if(!exist[nextStone]) return false; return true; } bool canCross(vector&lt;int&gt;&amp; stones) { if(stones == (vector&lt;int&gt;){0,1}) { return true; } int n = stones.size(); if(stones.back() &gt; (n * (1 + n - 1) / 2)) { return false; } unordered_map&lt;int, bool&gt; exist; for(int i : stones) exist[i] = true; priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, less&lt;pair&lt;int, int&gt;&gt;&gt; q; unordered_map&lt;int, unordered_map&lt;int, bool&gt;&gt; inq; if(stones[1] !]]></description>
</item>
<item>
    <title>68. Text Justification</title>
    <link>/en/posts/lc/0068_text_justification/</link>
    <pubDate>Wed, 23 Aug 2023 23:17:00 &#43;0800</pubDate>
    <author>Oasis</author>
    <guid>/en/posts/lc/0068_text_justification/</guid>
    <description><![CDATA[https://leetcode.com/problems/text-justification/
https://leetcode.com/problems/text-justification/submissions/1030637814/
class Solution { public: vector&lt;string&gt; fullJustify(vector&lt;string&gt;&amp; words, int maxWidth) { vector&lt;string&gt; ans; for(int i = 0; i &lt; words.size(); ){ string tans = &#34;&#34;; int j = i; while(j != words.size() &amp;&amp; tans.size() + words[j].size() &lt;= maxWidth) { tans += words[j]; if(tans.size() != maxWidth) tans += &#34; &#34;; j++; } if(j == words.size()) { ans.push_back(tans + string(maxWidth - tans.size(), &#39; &#39;)); } else { ans.push_back(rerrange(tans, maxWidth)); } i = j; } return ans; } inline string rerrange(string s, int maxWidth) { int space = 0; vector&lt;string&gt; split; string ts = &#34;&#34;; for(auto c : s) { if(c == &#39; &#39;) space++, split.]]></description>
</item>
<item>
    <title>239. Sliding Window Maximum</title>
    <link>/en/posts/lc/0239_sliding_window_maximum/</link>
    <pubDate>Wed, 16 Aug 2023 09:07:00 &#43;0800</pubDate>
    <author>Oasis</author>
    <guid>/en/posts/lc/0239_sliding_window_maximum/</guid>
    <description><![CDATA[https://leetcode.com/problems/sliding-window-maximum/
https://leetcode.com/problems/sliding-window-maximum/submissions/1022554836/
class Solution { public: vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) { priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int,int&gt;&gt;, less&lt;pair&lt;int,int&gt;&gt;&gt; q; for(int i = 0; i &lt; k; ++i) { q.push(pair(nums[i],i)); } vector&lt;int&gt; ans; ans.push_back(q.top().first); for(int i = k; i &lt; nums.size(); ++i) { q.push(pair(nums[i], i)); auto t = q.top(); while(t.second &lt;= i - k) { q.pop(); t = q.top(); } ans.push_back(q.top().first); } return ans; } }; ]]></description>
</item>
<item>
    <title>LeetCode Biweekly Contest 91 Tutorial</title>
    <link>/en/posts/lc-contest/leetcode-biweekly-contest-91-tutorial/</link>
    <pubDate>Sun, 13 Nov 2022 14:29:05 &#43;0800</pubDate>
    <author>Oasis</author>
    <guid>/en/posts/lc-contest/leetcode-biweekly-contest-91-tutorial/</guid>
    <description><![CDATA[Q2 Tutorial An easy dp problem, for dp[i], means how many good string of length i.
Init dp[zero] = 1, dp[one] = 1 (if one == zero, then dp[one] = 2);
So dp[i] = dp[i - zero] + dp[i - one]. After calculate all dp, sum up dp[low] to dp[high].
Accepted Code class Solution { public: long long dp[100005]; int countGoodStrings(int low, int high, int zero, int one) { memset(dp, 0, sizeof(dp)); dp[zero]++; dp[one]++; for(int i = min(zero, one); i &lt;= high; ++i){ if(i &gt; zero) dp[i] += dp[i - zero]; if(i &gt; one) dp[i] += dp[i - one]; dp[i] %= 1000000007; } long long ans = 0; for(int i = low; i &lt;= high; ++i){ ans += dp[i]; ans %= 1000000007; } return ans; } }; Q3 Tutorial First, from root 0, bfs all tree to find where bob is.]]></description>
</item>
<item>
    <title>2022.10 Daily LeetCode Coding Problems Tutorial</title>
    <link>/en/posts/2022.10-daily-leetcode-coding-problems-tutorial/</link>
    <pubDate>Sat, 01 Oct 2022 11:22:16 &#43;0800</pubDate>
    <author>Oasis</author>
    <guid>/en/posts/2022.10-daily-leetcode-coding-problems-tutorial/</guid>
    <description><![CDATA[If you get any problem of my code or you find something wrong, just leave a comment or contact with me, I&rsquo;ll response you as fast as I can if I see it.
If this tutorial helps you well, you can subscribe my website, every time I update any Tutorial, I&rsquo;ll send an email to all subscribers.
10-31 766. Toeplitz Matrix Difficulty: Easy Accepted Code class Solution { public: bool isToeplitzMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) { vector&lt;int&gt; n[int(matrix.]]></description>
</item>
<item>
    <title>Codeforces 1697 D Tutorial</title>
    <link>/en/posts/cf/codeforces-1697-d-tutorial/</link>
    <pubDate>Sat, 09 Jul 2022 18:04:59 &#43;0800</pubDate>
    <author>Oasis</author>
    <guid>/en/posts/cf/codeforces-1697-d-tutorial/</guid>
    <description><![CDATA[D. Guess The String Problem summary The Jury chosen a stringS consisting of n characters; each character of S is a lowercase Latin letter.
You may ask query in two types:
1 i - query for the letterSi 2 l r - query the size of character set of Sl,Sl+1,......,Sr You are allowed to ask no more than 26 queries of the first type, and no more than 6000 queries of the second type.]]></description>
</item>
</channel>
</rss>
